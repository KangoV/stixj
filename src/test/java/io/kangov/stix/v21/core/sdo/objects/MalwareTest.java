package io.kangov.stix.v21.core.sdo.objects;

import io.kangov.stix.Parser;
import io.kangov.stix.common.mock.Mocks;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import io.micronaut.validation.validator.Validator;
import jakarta.inject.Inject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

import static java.util.stream.IntStream.range;
import static org.assertj.core.api.Assertions.assertThat;

@MicronautTest
public class MalwareTest {

    private static final Logger log = LoggerFactory.getLogger(MalwareTest.class);
    private static final int MOCK_COUNT = 200;

    @Inject Mocks mock;
    @Inject Parser parser;

    private String json = """
        {
            "id": "malware--3a41e552-999b-4ad3-bedc-332b6d9ff80c",
            "type": "malware",
            "spec_version": "2.1",
            "created": "2023-11-15T17:24:14.356165Z",
            "modified": "2023-11-15T17:24:14.356165Z",
            "revoked": "true",
            "labels": [
                "label_1",
                "label_2"
            ],
            "confidence": 1,
            "external_references": [{
                "source_name": "veris",
                "description": "description",
                "external_id": "0001AA7F-C601-424A-B2B8-BE6C9F5164E7",
                "url": "https://github.com/vz-risk/VCDB/blob/125307638178efddd3ecfe2c267ea434667a4eea/data/json/validated/0001AA7F-C601-424A-B2B8-BE6C9F5164E7.json",
                "hashes": {
                  "SHA-256": "6db12788c37247f2316052e142f42f4b259d6561751e5f401a1ae2a6df9c674b"
                }
            }],
            "lang": "en",
            "is_family": true,
            "malware_types": [
                "bot"
            ],
            "name": "IMDDOS",
            "x_prop_1": "value-1",
            "x_prop_2": "value-2"
        }
        """;

    private Malware.Builder builder;


    @BeforeEach
    void beforeEach() {
        this.builder = new Malware.Builder()
            .addLabels(
                "label_1",
                "label_2")
            .lang("en")
            .confidence(2)
            .name("ACME Widget, Inc.")
            .description("ACME Widgets is fictional ;)")
            .addExternalReference(f -> f
                .sourceName("veris")
                .description("description")
                .url("https://github.com/vz-risk/VCDB/blob/125307638178efddd3ecfe2c267ea434667a4eea/data/json/validated/0001AA7F-C601-424A-B2B8-BE6C9F5164E7.json")
                .putHash("SHA-256", "6db12788c37247f2316052e142f42f4b259d6561751e5f401a1ae2a6df9c674b")
                .externalId("external_id")
            )
            .isFamily(true)
            .addMalwareType("bot")
            .name("IMDDOS")
            .customProperties(Map.of(
                "x_key_1", "value_1")
            );
    }

    @Test
    void testRandom() {
        var object = mock.mockMalware();
        range(0, MOCK_COUNT).forEach(i -> {
            var expected = mock.mockIdentity();
            var string = parser.writeObject(expected);
            var actual = parser.readObject(string, Identity.class);
            assertThat(actual).as("(%s) -- expected json: %s", i, string).isEqualTo(expected);
        });
    }

    @Test
    void test_String_to_Object() throws Exception{
        var object = parser.readObject(json, Malware.class);
        assertThat(object).isNotNull();
    }

    @Test
    void test_Object_to_String() throws Exception{
        var string = parser.writeObject(builder.build());
        assertThat(string).isNotNull();
    }



}
