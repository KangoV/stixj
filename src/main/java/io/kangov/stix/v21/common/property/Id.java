package io.kangov.stix.v21.common.property;

import com.fasterxml.jackson.annotation.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import org.immutables.value.Value;

import java.util.UUID;

/**
 * An identifier uniquely identifies a STIX Object and MAY do so in a deterministic way. A deterministic identifier
 * means that the identifier generated by more than one producer for the exact same STIX Object using the same
 * namespace, "ID Contributing Properties", and UUID method will have the exact same identifier value.
 * <p>
 * All identifiers, excluding those used in the deprecated Cyber Observable Container, MUST follow the form
 * object-type--UUID, where object-type is the exact value (all type names are lowercase strings, by definition) from
 * the type property of the object being identified or referenced and where the UUID MUST be an RFC 4122-compliant UUID
 * [RFC4122].
 * <p>
 * The UUID part of the identifier MUST be unique across all objects produced by a given producer regardless of the type
 * identified by the object-type prefix. Meaning, a producer MUST NOT reuse the UUID portion of the identifier for
 * objects of different types.
 * <p>
 * STIX Domain Objects, STIX Relationship Objects, STIX Meta Objects, and STIX Bundle Object SHOULD use UUIDv4 for the
 * UUID portion of the identifier. Producers using something other than UUIDv4 need to be mindful of potential
 * collisions and should use a namespace that guarantees uniqueness, however, they MUST NOT use a namespace of
 * 00abedb4-aa42-466c-9c01-fed23315a9b7 if generating a UUIDv5.
 * <p>
 * STIX Cyber-observable Objects SHOULD use UUIDv5 for the UUID portion of the identifier and the UUID portion of the
 * UUIDv5-based identifier SHOULD be generated according to the following rules:
 * <ul>
 * <li>The namespace SHOULD be 00abedb4-aa42-466c-9c01-fed23315a9b7. This defined namespace is necessary to support the
 * goal of deduplication and semantic equivalence of some STIX objects in the community of producers.</li>
 * <li>The value of the name portion SHOULD be the list of "ID Contributing Properties" (property-name and property
 * value pairs) as defined on each SCO object and SHOULD be represented as a JSON object that is then serialized /
 * stringified according to [RFC8785] to ensure a canonical representation of the JSON data.</li>
 * <li>If the contributing properties are all optional, and none are present on the SCO, then a UUIDv4 MUST be
 * used.</li>
 * <li>Producers not following these rules MUST NOT use a namespace of 00abedb4-aa42-466c-9c01-fed23315a9b7 and SHOULD
 * use UUIDv4 in cases where the id would not be unique.</li>
 * </ul>
 * <p>
 * STIX Cyber-observable Objects that are used in the deprecated Cyber Observable Container MAY use any string value for
 * the identifier. For the deprecated Cyber Observable Container, it is common for implementers to use simple numerical
 * strings for these identifiers (e.g., "0", "1", "2", etc.). See section 2.13 for more information.
 * <ul>
 * <li>These identifiers, when used inside the deprecated Cyber-observable Objects Container specify a local reference
 * to a Cyber-observable Object. These references MUST be valid within the local scope of the Cyber Observable Container
 * (observable-container) that holds both the source Cyber-observable Object and the Cyber-observable Object that it
 * references.</li>
 * <li>These identifiers SHOULD be a non-negative monotonically increasing integer, incrementing by 1 from a starting
 * value of 0, and represented as a string within the JSON MTI serialization. However, implementers MAY elect to use an
 * alternate key format if necessary.</li>
 * </ul>
 * <p>
 * Using Identifiers:
 * <p>
 * Consumers of STIX Cyber Threat Intelligence that are processing the objects property of an Observed-Data object can
 * assume that the identifier is an old deprecated Cyber Observable Container identifier. Consumers can also inspect
 * the identifier to see if it contains an object-type, if not, they can assume that it is a deprecated Cyber Observable
 * Container identifier. If it does have an object-type and it matches a SCO, then chances are it is a UUIDv5
 * deterministic identifier, but this can be verified by inspecting the UUID portion of the identifier. [RFC 4122]
 * defines how one can distinguish between a UUIDv4 and UUIDv5 value.
 */
@Value.Style(validationMethod = Value.Style.ValidationMethod.NONE)
public interface Id {

    /**
     * Returns the id property uniquely identifies this object.
     * <p>
     * For objects that support versioning, all objects with the same id are considered different versions of the same
     * object and the version of the object is identified by its modified property.
     *
     * @return The unique STIX identifier for this object
     */
    @Pattern(regexp = "^[a-zA-Z0-9]+(-[a-zA-Z]+)*--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")
    @NotBlank
    @Value.Default
    default String getId() {
        var ann = this.getClass().getAnnotation(JsonTypeName.class);
        var type = ann.value();
        return type + "--" + UUID.randomUUID();
    }
    
}
