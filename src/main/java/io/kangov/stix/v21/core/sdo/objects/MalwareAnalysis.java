package io.kangov.stix.v21.core.sdo.objects;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.kangov.stix.redaction.Redactable;
import io.kangov.stix.v21.bundle.Bundleable;
import io.kangov.stix.v21.core.sdo.SdoObject;
import io.kangov.stix.v21.core.sdo.types.KillChainPhase;
import io.kangov.stix.v21.enums.Vocabs;
import io.kangov.stix.validation.constraints.Vocab;
import io.micronaut.core.annotation.Introspected;
import jakarta.validation.constraints.NotBlank;
import org.immutables.serial.Serial;
import org.immutables.value.Value;

import java.time.Instant;
import java.util.*;
import java.util.function.UnaryOperator;

import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;
import static io.kangov.stix.v21.enums.Vocabs.Vocab.*;


/**
 * malware
 * <p>
 * Malware is a type of TTP that is also known as malicious code and malicious software, refers to a program that is inserted into a system,
 * usually covertly, with the intent of compromising the confidentiality, integrity, or availability of the victim's data, applications,
 * or operating system (OS) or of otherwise annoying or disrupting the victim.
 */

@Value.Immutable
@Serial.Version(1L)
//@DefaultTypeValue(value = "malware", groups = { DefaultValuesProcessor.class })
@Value.Style(
    optionalAcceptNullable = true,
    visibility = Value.Style.ImplementationVisibility.PACKAGE,
    overshadowImplementation = true,
    typeAbstract="",
    typeImmutable="*Impl",
    validationMethod = Value.Style.ValidationMethod.NONE, // let bean validation do it
    additionalJsonAnnotations = { JsonTypeName.class },
    depluralize = true)
@JsonTypeName("malware-analysis")
@JsonSerialize(as = MalwareAnalysis.class)
@JsonDeserialize(builder = MalwareAnalysis.Builder.class)
@JsonInclude(value = NON_EMPTY, content= NON_EMPTY)
@JsonPropertyOrder({
    "type",
    "spec_version",
    "id",
    "created",
    "modified",
    "created_by_ref",
    "revoked",
    "labels",
    "confidence",
    "lang",
    "external_references",
    "object_marking_refs",
    "granular_markings",
    "product",
    "version",
    "host_vm_ref",
    "operating_system_ref",
    "installed_software_ref",
    "configuration_version",
    "module",
    "analysis_engine_version",
    "analysis_definition_version",
    "submitted",
    "analysis_started",
    "analysis_ended",
    "result_name",
    "result",
    "analysis_sco_refs",
    "sample_ref"
})
@Redactable
@SuppressWarnings("unused")
@Introspected

public interface MalwareAnalysis extends SdoObject {

    /**
     * Exposes the generated builder outside this package
     * <p>
     * While the generated implementation (and consequently its builder) is not
     * visible outside this package, this builder inherits and exposes all public
     * methods defined on the generated implementation's Builder class.
     */
    class Builder extends MalwareAnalysisImpl.Builder {}

    static MalwareAnalysis create(UnaryOperator<Builder> spec) { return spec.apply(builder()).build(); }
    static MalwareAnalysis createMalwareAnalysis(UnaryOperator<Builder> spec) { return create(spec); }
    static Builder builder(UnaryOperator<Builder> spec) { return spec.apply(builder()); }
    static Builder builder() { return new Builder(); }

    default MalwareAnalysis update(UnaryOperator<Builder> builder) {
        return builder.apply(builder()).build();
    }

    @NotBlank
    @JsonProperty("product")
    @Redactable(useMask = true)
    String getProduct();

    @JsonProperty("version")
    @Redactable
    Optional<String> getVersion();

    @JsonProperty("host_vm_ref")
    @Redactable(useMask = true)
    String getHostVMRef();

    @JsonProperty("operating-system-refs")
    @Redactable
    Set<String> getOperatingSystemRefs();

    @JsonProperty("installed-software-refs")
    @Redactable
    Set<String> getInstalledSoftwareRefs();

    @JsonProperty("configuration_version")
    @Redactable(useMask = true)
    Optional<String> getConfigurationVersion();

    @JsonProperty("modules")
    @Redactable
    Set<String> getModules();

    @JsonProperty("analysis_engine_version")
    @Redactable(useMask = true)
    Optional<String> getAnalysisEngineVersion();

    @JsonProperty("analysis_definition_version")
    @Redactable(useMask = true)
    Optional<String> getAnalysisDefinitionVersion();

    @JsonProperty("submitted")
    @Redactable(useMask = true)
    Optional<Instant> getSubmitted();

    @JsonProperty("analysis_started")
    @Redactable(useMask = true)
    Optional<Instant> getAnalysisStarted();

    @JsonProperty("analysis_ended")
    @Redactable(useMask = true)
    Optional<Instant> getAnalysisEnded();

    @JsonProperty("result_name")
    @Redactable(useMask = true)
    Optional<String> getResultName();

    @JsonProperty("result")
    @Redactable(useMask = true)
    Optional<@Vocab(Vocabs.Vocab.MALWARE_RESULT) String> getResult();

    @JsonProperty("analysis_sco_refs")
    @Redactable
    Set<String> getAnalysisScoRefs();

    @JsonProperty("sample_refs")
    @JsonIdentityInfo(generator= ObjectIdGenerators.PropertyGenerator.class, property="id")
    @JsonIdentityReference(alwaysAsId=true)
//    @JsonDeserialize(converter=BundleableObjectSetConverter.class)
    @Redactable(useMask = true)
    Optional<String> getSampleRef();

}
