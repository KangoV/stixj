package io.kangov.stix.v21.core.sdo.objects;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.kangov.stix.redaction.Redactable;
import io.kangov.stix.util.ImmutableStyle;
import io.kangov.stix.v21.bundle.Bundleable;
import io.kangov.stix.v21.common.type.ExternalReference;
import io.kangov.stix.v21.core.sdo.SdoObject;
import io.kangov.stix.v21.core.sdo.types.KillChainPhase;
import io.kangov.stix.validation.constraints.Vocab;
import io.micronaut.core.annotation.Introspected;
import org.immutables.serial.Serial;
import org.immutables.value.Value;

import java.time.Instant;
import java.util.*;
import java.util.function.UnaryOperator;

import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;
import static io.kangov.stix.v21.enums.Vocabs.Vocab.*;


/**
 * malware
 * <p>
 * Malware is a type of TTP that is also known as malicious code and malicious software, refers to a program that is inserted into a system,
 * usually covertly, with the intent of compromising the confidentiality, integrity, or availability of the victim's data, applications,
 * or operating system (OS) or of otherwise annoying or disrupting the victim.
 */

@Value.Immutable
@Serial.Version(1L)
//@DefaultTypeValue(value = "malware", groups = {DefaultValuesProcessor.class})
@ImmutableStyle
@JsonTypeName("malware")
@JsonSerialize(as = Malware.class)
@JsonDeserialize(builder = Malware.Builder.class)
@JsonPropertyOrder({
    "type",
    "spec_version",
    "id",
    "created",
    "modified",
    "created_by_ref",
    "revoked",
    "labels",
    "confidence",
    "lang",
    "external_references",
    "object_marking_refs",
    "granular_markings",
    "name",
    "description",
    "malware_types",
    "is_family",
    "aliases",
    "kill_chain_phases",
    "first_seen",
    "last_seen",
    "operating_system_refs",
    "architecture_execution_envs",
    "implementation_languages",
    "capabilities",
    "sample_refs"
})
@Redactable
@SuppressWarnings("unused")
@Introspected

public interface Malware extends SdoObject {

    /**
     * Exposes the generated builder outside this package
     * <p>
     * While the generated implementation (and consequently its builder) is not
     * visible outside this package, this builder inherits and exposes all public
     * methods defined on the generated implementation's Builder class.
     */
    class Builder extends MalwareImpl.Builder {
        public Builder addExternalReference(UnaryOperator<ExternalReference.Builder> func) {
            addExternalReference(func.apply(ExternalReference.builder()).build());
            return this;
        }
    }
    
    static Malware create(UnaryOperator<Builder> spec) { return spec.apply(builder()).build(); }
    static Malware createBundle(UnaryOperator<Builder> spec) { return create(spec); }
    static Builder builder(UnaryOperator<Builder> spec) { return spec.apply(builder()); }
    static Builder builder() { return new Builder(); }

    default Malware update(UnaryOperator<Builder> builder) {
        return builder.apply(builder()).build();
    }

    @JsonProperty("name")
    @Redactable(useMask = true)
    Optional<String> getName();

    @JsonProperty("description")
    @Redactable
    Optional<String> getDescription();

    @JsonProperty("malware_types")
    @Redactable(useMask = true)
    Set<@Vocab(MALWARE_TYPE) String> getMalwareTypes();

    @JsonProperty("is_family")
    @Redactable(useMask = true)
    Boolean isFamily();

    @JsonProperty("aliases")
    @Redactable
    List<String> getAliases();

    @JsonProperty("kill_chain_phases")
    @Redactable
    Set<KillChainPhase> getKillChainPhases();

    @JsonProperty("first_seen")
    @Redactable(useMask = true)
    Optional<Instant> getFirstSeen();

    @JsonProperty("last_seen")
    @Redactable(useMask = true)
    Optional<Instant> getLastSeen();

    @JsonProperty("operating-system-refs")
    @Redactable
    Set<String> getOperatingSystemRefs();

    @JsonProperty("architecture-execution-envs")
    @Vocab(PROCESSOR_ARCHITECTURE)
    @Redactable
    Set<String> getArchitectureExecutionEnvs();

    @JsonProperty("implementation-languages")
    @Vocab(IMPLEMENTATION_LANGUAGES)
    @Redactable
    Set<String> getImplementationLanguages();

    @JsonProperty("capabilities")
    @Vocab(MALWARE_CAPABILITIES)
    @Redactable
    Set<String> getCapabilities();

    @JsonProperty("sample_refs")
//    @JsonIdentityInfo(generator= ObjectIdGenerators.PropertyGenerator.class, property="id")
//    @JsonIdentityReference(alwaysAsId=true)
//    @JsonDeserialize(converter=BundleableObjectSetConverter.class)
    @Redactable(useMask = true)
    Set<Bundleable> getSampleRefs();

}
